pipeline{
    agent{
        kubernetes{
            label 'aws-infra-builder'
            defaultContainer 'jnlp'
            yaml '''
apiVersion: v1
kind: Pod
metadata:
    labels:
    agent: agent-pod
spec:
    containers:
    - name: terraform-aws-cli
      image: arunareath/terraform-aws-cli:latest
      command:
      - cat
      tty: true
    - name: jnlp
      image: jenkins/inbound-agent:4.13-1
      args: ['$(JENKINS_SECRET)', '$(JENKINS_NAME)']
    serviceAccountName: jenkins
'''
        }
    }
    
    environment {
        // Set the path to Git executable explicitly
        GIT_HOME = '/usr/bin/git'
    }

    stages{
        stage('Checkout'){
            steps{
                container('terraform-aws-cli'){
                    checkout([$class: 'GitSCM', branches: [[name: '*/main']], doGenerateSubmoduleConfigurations: false, extensions: [], userRemoteConfigs: [[url: 'https://github.com/Arunareath/AWS-Jenkins-Gov.git']]])
                    sh "ls -ltra"
                }
            }
        }

        stage('AWS Credentials'){

            steps{
                script {
                    withCredentials([
                        [$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY', credentialId: '247828134926']
                    ]){
                        
                        // env.AWS_ACCESS_KEY_ID=credentials.AWS_ACCESS_KEY_ID
                        // env.AWS_SECRET_ACCESS_KEY=credentials.AWS_SECRET_ACCESS_KEY
                        env.AWS_REGION='us-gov-west-1'
                        
                    }
                }
            }

        }

        stage('terraform init'){
            steps{
                container('terraform-aws-cli'){
                    sh 'terraform init'
                }
            }
        }

        stage('terraform plan'){
            steps{
                container('terraform-aws-cli'){
                    // Print AWS credentials for verification
                    sh 'env | grep AWS'
            
                    // Alternatively, you can use AWS CLI to verify authentication
                    sh 'aws sts get-caller-identity'
                    sh 'terraform plan'
                }
            }
        }

        stage('terraform apply'){
            steps{
                container('terraform-aws-cli'){
                    sh 'terraform apply -auto-approve'
                }
            }
        }
    }

}